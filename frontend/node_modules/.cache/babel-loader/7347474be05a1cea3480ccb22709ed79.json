{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\mobileshop\\\\frontend\\\\src\\\\screens\\\\UserEditScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getUserDetails, updateUser } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\nimport FormContainer from '../components/FormContainer';\n\nconst UserEditScreen = () => {\n  history = useNavigate();\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const num = useParams();\n  const userId = num.id;\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      }, history.push('/admin/userlist'));\n    }\n\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserDetails(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setIsAdmin(user.isAdmin);\n    }\n  }, [dispatch, userId, user, successUpdate]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateUser);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Link, {\n    to: \"/admin/userlist\",\n    className: \"btn btn-light my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Go Back\"), /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"Edit User\"), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 28\n    }\n  }) : error ? /*#__PURE__*/React.createElement(Message, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 49\n    }\n  }, error) : /*#__PURE__*/React.createElement(Form, {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"name\",\n    placeholder: \"enter your name\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }\n  }, \"Email Adress\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    placeholder: \"enter email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"isadmin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    label: \"Is Admin\",\n    checked: isAdmin,\n    onChange: e => setIsAdmin(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, \"Update\"))));\n};\n\nexport default UserEditScreen;","map":{"version":3,"sources":["C:/Users/ADMIN/mobileshop/frontend/src/screens/UserEditScreen.js"],"names":["React","useState","useEffect","Link","useParams","useNavigate","Form","Button","useDispatch","useSelector","Message","Loader","getUserDetails","updateUser","USER_UPDATE_RESET","FormContainer","UserEditScreen","history","dispatch","name","setName","email","setEmail","isAdmin","setIsAdmin","num","userId","id","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","submitHandler","e","preventDefault","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link, useParams, useNavigate } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nconst UserEditScreen = () => {\r\n\r\n\r\n\r\n    history = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n\r\n    const num = useParams()\r\n    const userId = num.id\r\n\r\n    const userDetails = useSelector((state) => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userUpdate = useSelector((state) => state.userUpdate)\r\n    const {\r\n        loading: loadingUpdate,\r\n        error: errorUpdate,\r\n        success: successUpdate\r\n    } = userUpdate\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(successUpdate) {\r\n            dispatch({type: USER_UPDATE_RESET},\r\n                      history.push('/admin/userlist')  \r\n                )\r\n        }\r\n        if (!user.name || user._id !== userId) {\r\n            dispatch(getUserDetails(userId))\r\n        } else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n            setIsAdmin(user.isAdmin)\r\n        }\r\n\r\n    }, [dispatch, userId, user, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n\r\n        e.preventDefault()\r\n        dispatch(updateUser)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/userlist' className='btn btn-light my-3'>\r\n                Go Back\r\n            </Link>\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loading ? <Loader /> : error ? <Message variant=\"danger\" >{error}</Message> :\r\n                    (\r\n\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"name\"\r\n                                    placeholder=\"enter your name\"\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Adress</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"email\"\r\n                                    placeholder=\"enter email\"\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isadmin'>\r\n\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                >\r\n                                </Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button type=\"submit\" variant='primary'  >\r\n                                Update\r\n                            </Button>\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer>\r\n        </>\r\n\r\n    )\r\n}\r\nexport default UserEditScreen"]},"metadata":{},"sourceType":"module"}